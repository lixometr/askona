const MathUtils={map:(e,t,s,i,r)=>(e-t)*(r-i)/(s-t)+i,lerp:(e,t,s)=>(1-s)*e+s*t},body=document.body;let winsize;const calcWinsize=()=>winsize={width:window.innerWidth,height:window.innerHeight};let docScroll;calcWinsize(),window.addEventListener("resize",calcWinsize);const getPageYScroll=()=>docScroll=window.pageYOffset||document.documentElement.scrollTop;window.addEventListener("scroll",getPageYScroll);class Item{constructor(e){this.DOM={el:e},this.DOM.image=this.DOM.el.querySelector(".item__img"),this.renderedStyles={innerTranslationY:{previous:0,current:0,ease:.1,maxValue:parseInt(getComputedStyle(this.DOM.image).getPropertyValue("--overflow"),10),setValue:()=>{const e=this.renderedStyles.innerTranslationY.maxValue,t=-1*e;return Math.max(Math.min(MathUtils.map(this.props.top-docScroll,winsize.height,-1*this.props.height,t,e),e),t)}}},this.update(),this.observer=new IntersectionObserver(e=>{e.forEach(e=>this.isVisible=e.intersectionRatio>0)}),this.observer.observe(this.DOM.el),this.initEvents()}update(){this.getSize();for(const e in this.renderedStyles)this.renderedStyles[e].current=this.renderedStyles[e].previous=this.renderedStyles[e].setValue();this.layout()}getSize(){const e=this.DOM.el.getBoundingClientRect();this.props={height:e.height,top:docScroll+e.top}}initEvents(){window.addEventListener("resize",()=>this.resize())}resize(){this.update()}render(){for(const e in this.renderedStyles)this.renderedStyles[e].current=this.renderedStyles[e].setValue(),this.renderedStyles[e].previous=MathUtils.lerp(this.renderedStyles[e].previous,this.renderedStyles[e].current,this.renderedStyles[e].ease);this.layout()}layout(){this.DOM.image.style.transform=`translate3d(0,${this.renderedStyles.innerTranslationY.previous}px,0)`}}class SmoothScroll{constructor(){this.DOM={main:document.querySelector(".data-scroll-box")},this.DOM.scrollable=this.DOM.main.querySelector("div[data-scroll]"),this.items=[],[...this.DOM.main.querySelectorAll(".content > .item")].forEach(e=>this.items.push(new Item(e))),this.renderedStyles={translationY:{previous:0,current:0,ease:.1,setValue:()=>docScroll}},this.setSize(),this.update(),this.style(),this.initEvents(),requestAnimationFrame(()=>this.render())}update(){for(const e in this.renderedStyles)this.renderedStyles[e].current=this.renderedStyles[e].previous=this.renderedStyles[e].setValue();this.layout()}layout(){this.DOM.scrollable.style.transform=`translate3d(0,${-1*this.renderedStyles.translationY.previous}px,0)`}setSize(){body.style.height=`${this.DOM.scrollable.scrollHeight}px`}style(){this.DOM.main.style.position="fixed",this.DOM.main.style.zIndex=1,this.DOM.main.style.width=this.DOM.main.style.height="100%",this.DOM.main.style.top=this.DOM.main.style.left=0,this.DOM.main.style.overflow="hidden"}initEvents(){window.addEventListener("resize",()=>this.setSize())}render(){for(const e in this.renderedStyles)this.renderedStyles[e].current=this.renderedStyles[e].setValue(),this.renderedStyles[e].previous=MathUtils.lerp(this.renderedStyles[e].previous,this.renderedStyles[e].current,this.renderedStyles[e].ease);this.layout();for(const e of this.items)e.isVisible&&e.render();requestAnimationFrame(()=>this.render())}}const preloadImages=()=>new Promise((e,t)=>{});preloadImages().then(()=>{document.body.classList.remove("loading"),getPageYScroll(),new SmoothScroll}),getPageYScroll();